plugins {
    id "org.springframework.boot" version "3.1.0"
    id "io.spring.dependency-management" version "1.1.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.6.0"
    id "info.solidsoft.pitest" version "1.9.11"
    id "org.sonarqube" version "4.2.1.3168"
    id "application"
    id "jacoco"
    id "java"
}

ext {
    set("mapstructVersion", "1.5.5.Final")
    set("lombokMapstructBinding", "0.2.0")
    set("commonsCollections", "4.4")
    set("swaggerVersion", "2.9.2")
    set("openApiVersion", "2.1.0")
    set("hamcrestVersion", "1.3")
    set("logbackVersion", "0.1.5")
    set("instancioVersion", "3.7.1")

    set("sonarExclusions", "com.ipaixao.ibeer.infrastructure.config.*")
}

group = "com.ipaixao.ibeer"
version = "1.0.0"

sourceCompatibility = JavaVersion.VERSION_17

applicationName = "ibeer-service"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.kafka:spring-kafka'
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
    implementation "org.apache.commons:commons-collections4:${commonsCollections}"
    implementation "ch.qos.logback.contrib:logback-json-classic:${logbackVersion}"
    implementation "ch.qos.logback.contrib:logback-jackson:${logbackVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.liquibase:liquibase-core"
    implementation "org.postgresql:postgresql"
    implementation "org.yaml:snakeyaml"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBinding}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    compileOnly "org.projectlombok:lombok"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.instancio:instancio-junit:${instancioVersion}"
    testImplementation "org.springframework.kafka:spring-kafka-test"

    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    runtimeOnly "com.h2database:h2"
}

application {
    mainClassName = "com.ipaixao.ibeer.IBeerApplication"
}

openApi {
    apiDocsUrl.set("http://localhost:8081/api-docs")
    outputDir.set(file("$projectDir/docs"))
    outputFileName.set("swagger.json")
}

bootBuildImage {
    environment = [
            "BP_JVM_VERSION": "17.*"
    ]
    imageName = "ipaixao/${applicationName}:${project.version}"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

pitest {
    junit5PluginVersion.set("1.2.0")
    targetClasses.set(["com.ipaixao.ibeer.*"])
    exportLineCoverage.set(true)
    outputFormats.set(["HTML", "XML"])
    timestampedReports.set(false)
}

check {
    dependsOn jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("reports/jococo/test/ibeer-coverage-report")
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "BUNDLE"
            includes = ["com.ipaixao.ibeer.*"]
            excludes = [sonarExclusions]

            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.43
            }

            limit {
                counter = "CLASS"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
    }
}

sonar {
    properties {
        property("sonar.projectKey", "ibeer-service")
        property("sonar.projectName", "iBeer Service")
        property("sonar.organization", "com.ipaixao")
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.token", "sqp_287ead3f4ad25ba06fee0d4a26d36e2f5d9fb54f")

        property("sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/*.xml")
        property("sonar.java.coveragePlugin", "jacoco")
        property("sonar.java.source", "17")
        property("sonar.exclusions", sonarExclusions)
        property("sonar.coverage.exclusions", sonarExclusions)

    }
}

//tasks.build.dependsOn("openApi")
tasks.sonar.dependsOn("test", "jacocoTestReport", "jacocoTestCoverageVerification")